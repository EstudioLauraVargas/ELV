// youtubeService.js   
const { google } = require('googleapis');
const OAuth2 = google.auth.OAuth2;

const oauth2Client = new OAuth2(
  process.env.GOOGLE_CLIENT_ID,
  process.env.GOOGLE_CLIENT_SECRET,
  process.env.REDIRECT_URI
);

const youtube = google.youtube({
  version: 'v3',
  auth: oauth2Client,
});



const getVideosByChannel = async (channelId) => {
  try {
    console.log(`Fetching videos for channel ID: ${channelId}`);

    const response = await youtube.search.list({
      part: 'snippet',
      channelId: channelId,
      maxResults: 5,
      type: 'video',
      order: 'date',
    });

    console.log('API Response:', JSON.stringify(response.data, null, 2));

    const allVideos = response.data.items.map(item => ({
      youtube_id: item.id.videoId,
      title: item.snippet.title,
      description: item.snippet.description,
      thumbnail: item.snippet.thumbnails?.default?.url || '',
    }));

    console.log('Extracted Videos:', allVideos);

    if (allVideos.length === 0) {
      console.warn('No videos found from YouTube.');
    }

    return allVideos;
  } catch (error) {
    console.error('Error fetching videos from YouTube:', error);
    throw error;
  }
};

const getVideoById = async (videoId) => {
  try {
    console.log(`Fetching video for video ID: ${videoId}`);

    const response = await youtube.videos.list({
      part: 'snippet',
      id: videoId,
    });

    console.log('API Response:', JSON.stringify(response.data, null, 2));

    if (response.data.items.length === 0) {
      console.warn('No video found with the provided ID.');
      return null;
    }

    const item = response.data.items[0];
    return {
      youtube_id: item.id,
      title: item.snippet.title,
      description: item.snippet.description,
      thumbnail: item.snippet.thumbnails?.default?.url || '',
    };
  } catch (error) {
    console.error('Error fetching video from YouTube API:', error);
    throw error;
  }
};

const getVideosByPlaylist = async (playlistId) => {
  try {
    console.log(`Fetching videos for playlist ID: ${playlistId}`);

    const response = await youtube.playlistItems.list({
      part: 'snippet',
      playlistId,
      maxResults: 10,
    });

    console.log('API Response:', JSON.stringify(response.data, null, 2));

    const videos = response.data.items.map((item) => ({
      youtube_id: item.snippet.resourceId.videoId,
      title: item.snippet.title,
      description: item.snippet.description,
      thumbnail: item.snippet.thumbnails.default.url,
    }));

    console.log('Extracted Videos:', videos);

    return videos;
  } catch (error) {
    console.error('Error fetching videos by playlist:', error);
    throw error;
  }
};

module.exports = { getVideosByChannel, getVideoById, getVideosByPlaylist };

const express = require("express");
const session = require('express-session');
const morgan = require("morgan");
const routes = require("./routes");
const cors = require("cors");
const path = require('path');
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const { JWT_SECRET_KEY, GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET } = require("./config/envs");

// Configuración de CORS
const app = express();

// Configuración de middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use('/images', express.static(path.join(__dirname, 'images')));
app.use(
  session({
    secret: `${JWT_SECRET_KEY}`,
    resave: false,
    saveUninitialized: false,
  })
);

app.use(cors());
app.use(morgan('dev'));
app.use(passport.initialize());
app.use(passport.session()); // Agrega esta línea si usas sesiones con Passport

// Configuración de Passport para Google OAuth 2.0
passport.use(new GoogleStrategy({
  clientID: GOOGLE_CLIENT_ID,
  clientSecret: GOOGLE_CLIENT_SECRET,
  callbackURL: '/auth/google/callback'
},
(accessToken, refreshToken, profile, done) => {
  // Aquí puedes guardar el perfil del usuario en tu base de datos
  // Para simplicidad, solo devolvemos el perfil del usuario
  return done(null, profile);
}));

passport.serializeUser((user, done) => {
  done(null, user);
});

passport.deserializeUser((user, done) => {
  done(null, user);
});

// Rutas
app.use('/', routes);

// Rutas para autenticación de Google
app.get('/auth/google', passport.authenticate('google', {
  scope: ['https://www.googleapis.com/auth/youtube.readonly']
}));

app.get('/auth/google/callback', passport.authenticate('google', {
  failureRedirect: '/'
}), (req, res) => {
  res.redirect('/'); // Redirige a la página principal o a donde quieras
});

app.use('*', (req, res, next) => {
  res.status(404).send({
    error: true,
    message: 'Not found',
  });
});

app.use((err, req, res, next) => {
  res.status(err.statusCode || 500).send({
    error: true,
    message: err.message,
  });
});

module.exports = app;             
const { getVideosByChannel, getVideoById, getVideosByPlaylist } = require('../../youtubeService');
const { Video } = require('../data');

const getAndSaveVideo = async (req, res) => {
  if (!req.user) {
    return res.status(401).json({ message: 'Not authenticated' });
  }

  const channelId = process.env.CHANNEL_ID;

  try {
    const videos = await getVideosByChannel(channelId);
    console.log('Fetched videos:', videos);

    if (videos.length === 0) {
      return res.status(200).json({ message: 'No videos found from YouTube.' });
    }

    const videoPromises = videos.map(video =>
      Video.findOrCreate({
        where: { youtube_id: video.youtube_id },
        defaults: {
          title: video.title,
          description: video.description,
          thumbnail: video.thumbnail,
        },
      })
    );

    await Promise.all(videoPromises);

    res.status(200).json({ message: 'Videos fetched and stored successfully!' });
  } catch (error) {
    console.error('Error:', error);
    res.status(500).json({ error: 'Failed to fetch and store videos.' });
  }
};

const getAllVideos = async (req, res) => {
  try {
    const videos = await Video.findAll();
    res.status(200).json(videos);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch videos.' });
  }
};

const getVideoByIdController = async (req, res) => {
  const { videoId } = req.params;

  try {
    const video = await getVideoById(videoId);

    if (video) {
      await Video.findOrCreate({
        where: { youtube_id: video.youtube_id },
        defaults: {
          title: video.title,
          description: video.description,
          thumbnail: video.thumbnail,
        },
      });

      res.status(200).json({ message: 'Video fetched and stored successfully!' });
    } else {
      res.status(404).json({ message: 'Video not found.' });
    }
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch and store video.' });
  }
};

const getVideosByPlaylistController = async (req, res) => {
  const { playlistId } = req.params;

  try {
    const videos = await getVideosByPlaylist(playlistId);

    const videoPromises = videos.map(video =>
      Video.findOrCreate({
        where: { youtube_id: video.youtube_id },
        defaults: {
          title: video.title,
          description: video.description,
          thumbnail: video.thumbnail,
        },
      })
    );

    await Promise.all(videoPromises);

    res.status(200).json({ message: 'Videos fetched and stored successfully!' });
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch and store videos.' });
  }
};

module.exports = { getAndSaveVideo, getAllVideos, getVideoByIdController, getVideosByPlaylistController };

